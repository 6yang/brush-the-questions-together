import java.util.*;

public class Solution {
    /**
     *
     * @param matrix int整型二维数组 the matrix
     * @return int整型
     *动态规划递归超时了!!!
     */
    public int minPathSum (int[][] matrix) {
        // write code here
        int n = matrix[0].length-1;
        int m = matrix.length-1;
        int[][] dp = new int[m][n];
        dp[0][0] = matrix[0][0];
        //第一行只能是左边元素的和
        for (int i = 1; i < n; i++) {
            dp[i][0] = dp[i-1][0]+matrix[i][0];
        }
        //第一列同理
        for (int i = 1; i < n; i++) {
            dp[0][i] = dp[0][i-1] + matrix[0][i];
        }
        //计算其余
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = Math.max(dp[i][j-1],dp[i-1][j])+matrix[i][j];
            }
        }
        return dp[m][n];

    }
}