import java.util.*;


public class Solution {
    /**
     *
     * @param matrix int整型二维数组 the matrix
     * @return int整型
     * 典型的动态规划题目
     */
    public int minPathSum (int[][] matrix) {
        // write code here
        int n = matrix[0].length-1;
        int m = matrix.length-1;
        return matrix[m][n]+Math.min(minPathFromIndex(matrix,m-1,n),minPathFromIndex(matrix,m,n-1));

    }
    public int minPathFromIndex(int [][] matrix ,int m ,int n){
        if(m==0&&n==0) return matrix[0][0];//找到路径返回值
        else if(m == 0) return matrix[m][n]+ minPathFromIndex(matrix,m,n-1);
        else if(n == 0) return matrix[m][n]+ minPathFromIndex(matrix,m-1,n);
        return matrix[m][n]+Math.min(minPathFromIndex(matrix,m-1,n),minPathFromIndex(matrix,m,n-1));

    }
}